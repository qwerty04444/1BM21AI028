#include <iostream>
#include <limits>

using namespace std;

const int MAX_V = 100; // Maximum number of vertices

class Graph {
private:
    int V; // Number of vertices
    int adjacencyMatrix[MAX_V][MAX_V]; // Adjacency matrix representation

public:
    Graph(int vertices) : V(vertices) {
        // Initialize adjacency matrix with maximum values
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                adjacencyMatrix[i][j] = numeric_limits<int>::max();
            }
        }
    }

    void addEdge(int u, int v, int weight) {
        adjacencyMatrix[u][v] = weight;
        adjacencyMatrix[v][u] = weight;
    }

    int primsMST() {
        int startVertex = 0; // Start with vertex 0
        bool visited[MAX_V] = { false };
        int minCost = 0;

        visited[startVertex] = true;

        // Track the nearest vertex to the MST for each vertex
        int nearest[MAX_V];
        for (int i = 0; i < V; i++) {
            nearest[i] = (visited[i]) ? startVertex : -1;
        }

        for (int i = 1; i < V; i++) {
            int u = -1;

            // Find the unvisited vertex with the minimum distance to the MST
            for (int j = 0; j < V; j++) {
                if (!visited[j] && (u == -1 || nearest[j] != -1 && adjacencyMatrix[j][nearest[j]] < adjacencyMatrix[u][nearest[u]])) {
                    u = j;
                }
            }

            visited[u] = true;
            minCost += adjacencyMatrix[u][nearest[u]];

            // Update the nearest vertex to the MST for the unvisited neighbors of u
            for (int v = 0; v < V; v++) {
                if (!visited[v] && adjacencyMatrix[u][v] < adjacencyMatrix[v][nearest[v]]) {
                    nearest[v] = u;
                }
            }
        }

        return minCost;
